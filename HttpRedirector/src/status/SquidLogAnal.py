'''
Created on 2016-2-25

@author: hydra
'''
from src.lib.HitCountCurve import HitCountCurve


class squidLogLine(object):
  line = None
  
  def __init__(self, line):
    self.line = line
    self.fields = {}
    self.parse()
   
    
    
  def parse(self):
    #TODO: BigBug!
    #warning : BIGBUG
    elements = [e for e in self.line.strip().split(' ') if e!='']
    '''
    1456389039.006   2815 ::1 TCP_MISS/200 543688 GET cache_object://localhost/objects - HIER_NONE/- text/plain
    '''
    
    try:
      self.fields['timestamp'] = float(elements[0])
      self.fields['unknown1'] = int(elements[1])
      self.fields['srcaddress'] = elements[2]
      self.fields['result'] = elements[3].split('/')
      self.fields['unknown2'] = int(elements[4])
      self.fields['method'] = elements[5]
      self.fields['url'] = elements[6]
      self.fields['sub'] = elements[7]
      self.fields['hire'] = elements[8].split('/')
      self.fields['content-type'] = elements[9]
      
    except:
      print "error when parsing"
      

class SquidLogAnal(object):
  '''
  SquidLogAnal
  Analyze access.log generated by squid
  '''

  
  def __init__(self, path='/var/log/squid/access.log'):
    self.log_path = path
    self.url_statistics = {}
    self.time_granularity = 1
    self.time_hold = 50
    self.timestamp_ref = 0
    #print 'squidloganal init'
    pass

  
  def analyze(self):
    
    try:
      fp = open(self.log_path,'r')
      lines = fp.readlines()
    finally:
      fp.close()
    
    #print 'analyzing...'

    for line in lines:
      al = squidLogLine(line)
      #res = (al.fields['method'], al.fields['url'])
      res = ('GET', al.fields['url'])
      curve = None
      try:
        curve = self.url_statistics[res]
        
      except:
        curve = HitCountCurve(self.time_granularity, self.time_hold, self.timestamp_ref)
        self.url_statistics[res] = curve
      

      if al.fields['method'] == 'PURGE':
        #TODO: this is temp, just for showing 
        del self.url_statistics[res]
      else:
        curve.hitAtTimeStamp(al.fields['timestamp'])
        
    for v in self.url_statistics.values():
      v.hitNow(0)
      
  
    return self.url_statistics
        
      